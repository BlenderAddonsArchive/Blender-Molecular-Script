# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Molecular Addon for Blender

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build_windows:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest cython
       # if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Build with Cython
      id: build
      run: echo "::set-output name=version::$(python make_release.py)"
    - name: Cache windows zip
    - uses: actions/cache@v2
        id: zip-cache
        with:
          path: ./molecular_${{steps.build.outputs.version}}_win.zip
          key: ${{ github.sha }}

  build_linux:

    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        # attempt to install libpython.a for 3.10
        sudo add-apt-repository ppa:deadsnakes/ppa
        sudo apt update
        sudo apt install libpython3.10-dev
        python -m pip install --upgrade pip
        pip install flake8 pytest cython
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Build with Cython
      id: build
      run: echo "::set-output name=version::$(python make_release.py)"
    - name: Cache linux zip
    - uses: actions/cache@v2
        id: zip-cache
        with:
          path: ./molecular_${{steps.build.outputs.version}}_linux.zip
          key: ${{ github.sha }}
  
  build_macos:

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest cython
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Build with Cython
      id: build
      run: echo "::set-output name=version::$(python make_release.py)"
    - name: Cache mac zip
    - uses: actions/cache@v2
        id: zip-cache
        with:
          path: ./molecular_${{steps.build.outputs.version}}_mac.zip
          key: ${{ github.sha }}      

  upload_draft:
    name: Upload zips as draft release assets
    runs-on: ubuntu-latest
    needs: [build_windows, build_linux, build_macos]

    steps:
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: $GITHUB_REPOSITORY
      - uses: actions/cache@v2
        id: zip-cache
        with:
          path: ./*
          key: ${{ github.sha }}
      #- run: python .github/workflows/release.py --path . --files py_modifier.zip
      - run: ls *.zip
